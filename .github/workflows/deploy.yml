#yaml-language-server: $schema=https://json.schemastore.org/github-workflow
name: Deploy App

env:
  AZURE_WEBAPP_NAME: tmpdevweb
  AZURE_RESOURCE_GROUP: tmpdevapp-rg
  AZURE_LOCATION: eastus

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  deploy-services:
    runs-on: ubuntu-latest
    environment: Development
    permissions:
      id-token: write
      contents: read
    outputs:
      appServiceName: ${{ steps.deploy2.outputs.appServiceName }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Authenticate with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    - name: "Create group: ${{ env.AZURE_RESOURCE_GROUP }}"
      if: false
      run: |
        if [ $(az group exists --name ${{ env.AZURE_RESOURCE_GROUP }}) = false ]; then
          az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location ${{ env.AZURE_LOCATION }}
        fi
        
    - name: Deploy services
      id: deploy
      if: false
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ./env/main.bicep
        parameters: 'webAppName=${{ env.AZURE_WEBAPP_NAME }} isLinuxDeploy=false sku=B1'
        failOnStdErr: true

    - name: Deploy services (AZ CLI)
      id: deploy2
      run: |
        RESULTS=$(az deployment group --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query properties.outputs --template-file ./env/main.bicep --parameters webAppName=${{ env.AZURE_WEBAPP_NAME }} isLinuxDeploy=false sku=B1)
        echo $RESULTS
        APPSERVICENAME="$(echo $RESULTS | jq -r '.appServiceName.value' )"
        APPSERVICEHOST="$(echo $RESULTS | jq -r '.appServiceHost.value' )"
        echo "::set-output name=appServiceName::$APPSERVICENAME"
        echo "::set-output name=appServiceHost::$APPSERVICEHOST"


  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build and package 
        run: dotnet build --configuration Release /t:Package /p:PackageFolder=${{ runner.temp }}/pkg
        working-directory: ${{ github.workspace }}/src

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ${{ runner.temp }}/pkg/publish.zip
          retention-days: 1
          if-no-files-found: error

  deploy:
    permissions:
      contents: none
      id-token: write
    runs-on: ubuntu-latest
    needs: [build, deploy-services]
    environment:
      name: 'Development'
      url: 'https://${{ needs.deploy-services.outputs.appServiceName }}.azurewebsites.net'
      # ${{ steps.deploy-to-webapp2.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: package
          path: ${{ runner.temp }}/package
          
      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Web App
        if: false
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy-services.outputs.appServiceName }}
          package: ${{ runner.temp }}/package/publish.zip

      - name: Deploy to Azure Web App (AZCLI)
        id: deploy-to-webapp2
        run: |
          RESULTS=$(az webapp deployment source config-zip --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ needs.deploy-services.outputs.appServiceName }} --src ${{ runner.temp }}/package/publish.zip)
          echo "::set-output name=webapp-url::"
