#yaml-language-server: $schema=hhttps://json.schemastore.org/github-workflow.json
name: Deploy App

env:
  IS_LINUX: true
  SKU: B1

on:
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: Development
    permissions:
      id-token: write
      contents: read
    outputs:
      appServiceName: ${{ steps.deploy2.outputs.appServiceName }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Authenticate with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
    - name: "Create group: ${{ vars.AZURE_RESOURCE_GROUP }}"
      if: false
      run: |
        if [ $(az group exists --name ${{ vars.AZURE_RESOURCE_GROUP }}) = false ]; then
          az group create --name ${{ vars.AZURE_RESOURCE_GROUP }} --location ${{ vars.AZURE_LOCATION }}
        fi
    
    # Deploy using Azure-provided Action (disabled)
    - name: Deploy services (Action)
      id: deploy
      if: false
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ vars.AZURE_RESOURCE_GROUP }}
        template: ./env/main.bicep
        parameters: 'webAppName=${{ vars.AZURE_WEBAPP_NAME }} isLinuxDeploy=${{ env.IS_LINUX }} sku=${{ env.SKU }}'
        failOnStdErr: true

    # Deploy using the Azure CLI (developer-friendly)
    - name: Deploy services (AzCLI)
      id: deploy2
      run: |
        RESULTS=$(az deployment group create --resource-group "${{ vars.AZURE_RESOURCE_GROUP }}" --query "properties.outputs" --template-file "./env/main.bicep" --parameters webAppName='${{ vars.AZURE_WEBAPP_NAME }}' isLinuxDeploy=false sku=B1)
        echo $RESULTS
        APPSERVICENAME="$(echo $RESULTS | jq -r '.appServiceName.value' )"
        APPSERVICEHOST="$(echo $RESULTS | jq -r '.appServiceHost.value' )"
        echo "appServiceName=$APPSERVICENAME" >> $GITHUB_OUTPUT
        echo "appServiceHost=$APPSERVICEHOST" >> $GITHUB_OUTPUT


  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
      
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build and package 
        run: dotnet build --configuration Release /t:Package /p:PackageFolder=${{ runner.temp }}/pkg
        working-directory: ${{ github.workspace }}/src

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ${{ runner.temp }}/pkg/publish.zip
          retention-days: 1
          if-no-files-found: error

  deploy-app:
    permissions:
      contents: none
      id-token: write
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    environment:
      name: 'Development'
      url: 'https://${{ needs.deploy-infrastructure.outputs.appServiceName }}.azurewebsites.net'
      # ${{ steps.deploy-to-webapp2.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4.1.7
        with:
          name: package
          path: ${{ runner.temp }}/package
          
      - name: Authenticate with Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Deploy using the Azure-provided Action (disabled)
      - name: Deploy to Azure Web App
        if: false
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.deploy-infrastructure.outputs.appServiceName }}
          package: ${{ runner.temp }}/package/publish.zip

      # Deploy using the Azure CLI (developer-friendly)
      - name: Deploy to Azure Web App (AzCLI)
        id: deploy-to-webapp2
        run: |
          RESULTS=$(az webapp deployment source config-zip --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --name ${{ needs.deploy-infrastructure.outputs.appServiceName }} --src ${{ runner.temp }}/package/publish.zip)
          echo $RESULTS | jq .
          echo "webapp-results<<EOFDE" >> $GITHUB_OUTPUT
          echo $RESULTS >> $GITHUB_OUTPUT
          echo EOFDE >> $GITHUB_OUTPUT
